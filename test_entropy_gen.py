# import sys
# sys.path.append('/content/NistRng')

def test_file(path):
    import nistrng
    import numpy as np

    # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
    with open(path, 'r') as f:
        data = f.read().strip()

    sequence = np.array([int(bit) for bit in data if bit in '01'], dtype=int)

    from nistrng import check_eligibility_all_battery, run_all_battery, SP800_22R1A_BATTERY

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º eligibility
    eligible_battery = check_eligibility_all_battery(sequence, SP800_22R1A_BATTERY)

    print("\n–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–≥–æ–¥–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö (eligibility):")
    eligible_count = sum(1 for eligible in eligible_battery.values() if eligible)
    print(f"–î–æ—Å—Ç—É–ø–Ω–æ —Ç–µ—Å—Ç–æ–≤: {eligible_count}/{len(eligible_battery)}")

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    print("\nüîÑ –ó–∞–ø—É—Å–∫–∞—é —Ç–µ—Å—Ç—ã NIST... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç...")
    results = run_all_battery(sequence, eligible_battery, SP800_22R1A_BATTERY)

    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\n" + "=" * 60)
    print("–†–ï–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–û–í NIST")
    print("=" * 60)

    passed_tests = 0
    total_tests = 0

    for result_tuple, name in zip(results, eligible_battery):
        if eligible_battery[name]:
            total_tests += 1

            # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –∫–æ—Ä—Ç–µ–∂
            result_obj, index = result_tuple

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã
            passed = result_obj.passed
            score = result_obj.score  # –≠—Ç–æ p-value

            status = "‚úÖ PASS" if passed else "‚ùå FAIL"
            if passed:
                passed_tests += 1

            print(f"{name:.<50} {status} (p-value: {score:.6f})")

    print(f"\n–ò–¢–û–ì: {passed_tests}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")

    # –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
    print(f"\n=== –û–¶–ï–ù–ö–ê –ö–ê–ß–ï–°–¢–í–ê ===")
    if passed_tests == total_tests:
        print("üéâ –û–¢–õ–ò–ß–ù–û: –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–ª—É—á–∞–π–Ω–∞.")
    elif passed_tests >= total_tests * 0.9:
        print("üëç –û–ß–ï–ù–¨ –•–û–†–û–®–û: –ü—Ä–æ–π–¥–µ–Ω–æ –±–æ–ª–µ–µ 90% —Ç–µ—Å—Ç–æ–≤")
    elif passed_tests >= total_tests * 0.8:
        print("üëç –•–û–†–û–®–û: –ü—Ä–æ–π–¥–µ–Ω–æ –±–æ–ª–µ–µ 80% —Ç–µ—Å—Ç–æ–≤")
    elif passed_tests >= total_tests * 0.7:
        print("‚ö†Ô∏è  –£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û: –ü—Ä–æ–π–¥–µ–Ω–æ –±–æ–ª–µ–µ 70% —Ç–µ—Å—Ç–æ–≤")
    else:
        print("‚ùå –ü–õ–û–•–û: –ú–µ–Ω—å—à–µ 70% —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")

    print(f"–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {passed_tests / total_tests * 100:.1f}%")


test_file('random_secure.txt')